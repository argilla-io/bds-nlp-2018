{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of text.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/recognai/bds-nlp-2018/blob/master/imdb_text_classification_lm_fine_tuning_fastai\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "BGa1qP5L6xvA",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "!pip install fastai\n",
        "!pip install torch"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ClhVYT7a6p4w",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "from fastai import *        # Quick access to most common functionality\n",
        "from fastai.text import *   # Quick access to NLP functionality"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "ZXpBmd346p5K",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "# Text example"
      ]
    },
    {
      "metadata": {
        "id": "o9_8dLPa6p5S",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "An example of creating a language model and then transfering to a classifier."
      ]
    },
    {
      "metadata": {
        "id": "E3XPFe-M6p5U",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "path = untar_data(URLs.IMDB_SAMPLE)\n",
        "path"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "onvmuLVY6p5t",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Open and view the independent and dependent variables:"
      ]
    },
    {
      "metadata": {
        "id": "ZND3dExD6p51",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(path/'train.csv', header=None)\n",
        "df.head()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "VIam7SCK6p6J",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "classes = read_classes(path/'classes.txt')\n",
        "classes[0], classes[1]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "WH3xuuoG6p6X",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Create a `DataBunch` for each of the language model and the classifier:"
      ]
    },
    {
      "metadata": {
        "id": "ayWE4tCD6p6a",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "data_lm = TextLMDataBunch.from_csv(path)\n",
        "data_clas = TextClasDataBunch.from_csv(path, vocab=data_lm.train_ds.vocab)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "Vg3Jsq_E6p6o",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "We'll fine-tune the language model. [fast.ai](http://www.fast.ai/) has a pre-trained English model available that we can download, we jsut have to specify it like this:"
      ]
    },
    {
      "metadata": {
        "id": "DjoyQIGn6p6t",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "learn = RNNLearner.language_model(data_lm, pretrained_model=URLs.WT103)\n",
        "learn.unfreeze()\n",
        "learn.fit(2, slice(1e-4,1e-2))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "B4j5phSx6p7J",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Save our language model's encoder:"
      ]
    },
    {
      "metadata": {
        "id": "LBx8lxDc6p7U",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "learn.save_encoder('enc')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "TVV7wBse6p7a",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "Fine tune it to create a classifier:"
      ]
    },
    {
      "metadata": {
        "id": "mbrasvCY6p7d",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "learn = RNNLearner.classifier(data_clas)\n",
        "learn.load_encoder('enc')\n",
        "learn.fit(3, 1e-3)"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}